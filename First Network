from sklearn.datasets import load_digits
from sklearn.model_selection import train_test_split
from sklearn.neural_network import MLPClassifier
from sklearn.metrics import accuracy_score, classification_report
import numpy as np

# Cargar los datos
digits = load_digits()
X, y = digits.data, digits.target

# Dividir los datos en conjunto de entrenamiento y prueba
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Normalizar los datos (muy importante para redes neuronales)
X_train = X_train / 16.0
X_test = X_test / 16.0

# Crear y configurar la red neuronal
red_neuronal = MLPClassifier(
    hidden_layer_sizes=(100, 50),  # Dos capas ocultas: primera con 100 neuronas, segunda con 50
    activation='relu',             # Función de activación ReLU
    solver='adam',                 # Optimizador Adam
    max_iter=1000,                # Número máximo de iteraciones
    random_state=42
)

# Entrenar la red
red_neuronal.fit(X_train, y_train)

# Hacer predicciones
predicciones = red_neuronal.predict(X_test)

# Evaluar el rendimiento
precision = accuracy_score(y_test, predicciones)
print(f"\nPrecisión del modelo: {precision * 100:.2f}%")
print("\nInforme detallado de clasificación:")
print(classification_report(y_test, predicciones))
